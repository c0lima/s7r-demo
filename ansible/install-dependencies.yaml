- name: Install software
  hosts: localhost
  become: true
  tasks:
    - name: Install Java
      yum:
        name: java-11-openjdk
        state: present

    - name: Install wget
      yum:
        name: wget
        state: present

    - name: Install Elastic repo
      yum_repository:
        name: elastic-8.x
        description: Elastic repository for 8.x packages
        baseurl: https://artifacts.elastic.co/packages/8.x/yum
        gpgcheck: yes
        gpgkey: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        enabled: no

    - name: Add Node.js v14.x LTS repository
      shell: |
        curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -
      when: "'nodejs' not in ansible_facts.packages"

    - name: Install NodeJs
      yum:
        name: nodejs
        state: present
              

    - name: Install Logstash
      command:
        cmd: yum install --enablerepo=elastic-8.x logstash -y
        warn: no

    - name: Install MariaDB
      yum:
        name: mariadb-server
        state: present

    - name: Check if Elastic Agent is installed
      stat:
        path: /opt/Elastic/Agent
      register: elastic_agent_directory

    - name: Download and install Elastic Agent
      shell:
        cmd: |
          cd /tmp/
          curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.3.0-linux-x86_64.tar.gz
          tar xzvf elastic-agent-8.3.0-linux-x86_64.tar.gz
          cd elastic-agent-8.3.0-linux-x86_64
          ./elastic-agent install -n
      when: not elastic_agent_directory.stat.exists
      ignore_errors: true

    - name: Inform that Elastic Agent is already installed
      debug:
        msg: "Elastic Agent is already installed."
      when: elastic_agent_directory.stat.exists

    - name: Check if Kafka directory exists
      stat:
        path: /opt/kafka_2.13-3.5.0
      register: kafka_directory_stat

    - name: Download Kafka binary
      get_url:
        url: https://downloads.apache.org/kafka/3.5.0/kafka_2.13-3.5.0.tgz
        dest: /tmp/kafka_2.13-3.5.0.tgz
      when: not kafka_directory_stat.stat.exists

    - name: Extract Kafka binary
      unarchive:
        src: /tmp/kafka_2.13-3.5.0.tgz
        dest: /opt/
        remote_src: true
      when: not kafka_directory_stat.stat.exists

    - name: Set Kafka cluster ID
      shell:
        cmd: |
          KAFKA_CLUSTER_ID="$(/opt/kafka_2.13-3.5.0/bin/kafka-storage.sh random-uuid)"
          /opt/kafka_2.13-3.5.0/bin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c /opt/kafka_2.13-3.5.0/config/kraft/server.properties --ignore-formatted
      register: kafka_cluster_id_result
      changed_when: false

    - name: Write Kafka systemd service file
      copy:
        dest: /etc/systemd/system/kafka.service
        content: |
          [Unit]
          Description=Apache Kafka server
          After=network.target

          [Service]
          Type=simple
          Environment=KAFKA_CLUSTER_ID={{ kafka_cluster_id_result.stdout }}
          ExecStart=/opt/kafka_2.13-3.5.0/bin/kafka-server-start.sh /opt/kafka_2.13-3.5.0/config/kraft/server.properties

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      command:
        cmd: systemctl daemon-reload

    - name: Enable and start Kafka
      systemd:
        name: kafka
        state: started
        enabled: yes

    - name: Wait for Kafka to start
      wait_for:
        host: localhost
        port: 9092
        delay: 10
        timeout: 300

    - name: Create Kafka topic
      command:
        cmd: /opt/kafka_2.13-3.5.0/bin/kafka-topics.sh --create --topic elastic-test --bootstrap-server localhost:9092
      ignore_errors: true

    - name: Ensure directory exists
      file:
        path: /opt/kafka/scripts
        state: directory
        mode: '0755'
      become: yes 

    - name: Change to scripts directory
      command:
        cmd: cd /opt/kafka/scripts

    - name: Initialize npm project
      command:
        cmd: npm init -y
        chdir: /opt/kafka/scripts
        creates: /opt/kafka/scripts/package.json


    - name: Install necessary npm packages for producer.js
      npm:
        path: /opt/kafka/scripts
        state: present
        global: yes
        name: "{{ item }}"
      loop:
        - kafkajs
        - randomstring
        - random-mobile
        - uuid


    - name: Create producer.js file
      copy:
        dest: "/opt/kafka/scripts/producer.js"
        content: |
          import { Kafka, logLevel } from "kafkajs";
          import { IEvent, IUser } from "./model";
          import { v4 as uuidv4 } from "uuid";

          const kafka = new Kafka({
            clientId: "random-producer",
            brokers: ["localhost:9092"],
            connectionTimeout: 3000,
          });
          var randomstring = require("randomstring");
          const randomMobile = require("random-mobile");
          const producer = kafka.producer({});
          const topic = "elastic-test";

          const produce = async () => {
            await producer.connect();
            let i = 0;

            setInterval(async () => {
              var event = {};
              try {
                event = {
                  globalId: uuidv4(),
                  event: "USER-CREATED",
                  data: {
                    id: uuidv4(),
                    firstName: randomstring.generate(8),
                    lastName: randomstring.generate(6),
                    country: "India",
                    email: randomstring.generate(10) + "@gmail.com",
                    phoneNumber: randomMobile(),
                    city: "Hyderabad",
                    createdAt: new Date(),
                  } as IUser,
                } as IEvent;
                await producer.send({
                  topic,
                  acks: 1,
                  messages: [
                    {
                      value: JSON.stringify(event),
                    },
                  ],
                });

                // if the message is written successfully, log it and increment `i`
                console.log("writes: ", event);
                i++;
              } catch (err) {
                console.error("could not write message " + err);
              }
            }, 5000);
          };

          module.exports = produce;
